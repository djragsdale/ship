REM Declare STRUCTs
STRUCT Car (
  FLOAT year
  STRING make
  STRING model
)

BEGIN "STRUCTS"

REM Declare array of cars
VAR ARRAY $garage
VAR FLOAT $garageIterator
REM Declare temp vars for car prop
VAR Car $tempCar
VAR FLOAT $inputYear
VAR STRING $inputMake
VAR STRING $inputModel
VAR STRING $inputGoAgain
VAR BOOL $isAddingCars
VAR STRING $formattedCar

FUNC STRING:FormatCarString Car:$car
RETURN (((($car["year"]->str & " ") & $car["make"]) & " ") & $car["model"])
ENDFUNC

LET $garage = []
LET $garageIterator = 0

REM WHILE Loop for adding cars
REM At the end, ask if they want to add another car
LET $isAddingCars = True
WHILE $isAddingCars
LET $isAddingCars = False
INPUT $inputYear "Year of car: "
INPUT $inputMake "Make of car: "
INPUT $inputModel "Model of car: "
INPUT $inputGoAgain "Would you like to add another car? (Y/N)"
LET $tempCar = Car
LET $tempCar["year"] = $inputYear
LET $tempCar["make"] = $inputMake
LET $tempCar["model"] = $inputModel
LET $garage[$garageIterator] = $tempCar
LET $garageIterator = ($garageIterator + 1)
LET $isAddingCars = ($inputGoAgain == "Y")
IF $isAddingCars
ECHO "Adding another car..."
ENDIF
ENDWHILE

REM When done looping for input, loop for output
REM Print each car in a string formatted by a FUNC
LET $garageIterator = 0
WHILE ($garageIterator < $garage->len)
LET $formattedCar = FormatCarString [$garage[$garageIterator]]
ECHO $formattedCar
LET $garageIterator = ($garageIterator + 1)
ENDWHILE

ECHO "Thank you for using SHIP Garage Service. Please come again."
EXIT "STRUCTS"